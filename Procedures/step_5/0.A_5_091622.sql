-- Francisco: Description:
--            Execute: INSERT_PROP_REGRESS_REV_COUNT_ALL, INSERT_MACRO_MEAN_SDV, INSERT_PROP_AVM, INSERT_PROP_REGRESS_REV_ALL, 
--                     INSERT_PROP_SOLUTION_REV, UPDATE_PROP_REV, INSERT_PROP_REGRESS_AVM_ALL, INSERT_PROP_SOLUTION_AVM and UPDATE_PROP_AVM,
--                     INSERT_DBPROPERTY, INSERT_DBPROPERTY_SHORT and INSERT_METROCOUNTS
---DROP PROCEDURE A_5_091622
CREATE PROCEDURE [dbo].[A_5_091622] @MAXUWDATE DATE, @MAXYEAR INT,@MINYEAR INT
       
AS

BEGIN

BEGIN TRY
----

    -- 
        DECLARE @TIMESTAMP_LAST DATETIME2(7) SELECT @TIMESTAMP_LAST=CURRENT_TIMESTAMP
        SELECT CONCAT('UPDATE LPLIST_AVM... LOADS FINANCIAL, CENSUS, DATANUM FROM PROP_DISTINCT//RUNTIME(SEC)=', DATEDIFF(S,@TIMESTAMP_LAST,CURRENT_TIMESTAMP)) SELECT @TIMESTAMP_LAST=CURRENT_TIMESTAMP

        DECLARE  @UWDATE_START DATE,@UWDATE_END DATE,@MIN_NUMPROPS_FOR_US_MEAN_CALC INT,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL INT,@OUT FLOAT,@MODELNUM INT,@SUBTYPE_START NVARCHAR(100),@STATEMENTYEAR int
        SELECT 
        @MIN_NUMPROPS_FOR_US_MEAN_CALC=100,
        @MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL=25,
        @OUT=1.5,@SUBTYPE_START=''

        --------------------
        --OBSERVATION SET=1YR PRIOR FROM MAXUWDATE FOR MOST RECENT STATEMENTYEAR;CALENDAR YEARS FOR PRIOR
        SELECT @STATEMENTYEAR=@MAXYEAR
        WHILE @STATEMENTYEAR>=@MINYEAR

    BEGIN

        SELECT CONCAT('START AVM: ',@STATEMENTYEAR,'/',CURRENT_TIMESTAMP)	
        SELECT @UWDATE_START=DATEFROMPARTS(@STATEMENTYEAR,1,1),@UWDATE_END=DATEFROMPARTS(@STATEMENTYEAR,12,31)
        IF @STATEMENTYEAR=2022 SELECT @UWDATE_END=DATEFROMPARTS(@STATEMENTYEAR,12,31)
        --5mins- for each MODELNUM identify/save MDRA,SUBTYPE GROUPINGS with threshold number of properties with sufficient DATANUMS to perform regressions
        --REV-fitting against demographics only; MODELNUM=0
        --AVM divide into DATANUM corresponding to MODELNUM=0,1,2,3
        EXECUTE INSERT_PROP_REGRESS_REV_COUNT_ALL @MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@SUBTYPE_START
        EXECUTE INSERT_PROP_REGRESS_AVM_COUNT_ALL @MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@SUBTYPE_START,@UWDATE_START,@UWDATE_END
        --23 minutes - calculate/save mean/sdv across all dependent and independent variables for MDRA,SUBTYPE GROUPINGS from the regression count
        EXECUTE INSERT_MACRO_MEAN_SDV @STATEMENTYEAR
        --15mins, create table, loan means/sdv for all US

        EXECUTE INSERT_PROP_AVM @STATEMENTYEAR
        EXECUTE INSERT_PROP_REGRESS_REV_ALL @MIN_NUMPROPS_FOR_US_MEAN_CALC,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@SUBTYPE_START
        EXECUTE INSERT_PROP_SOLUTION_REV @STATEMENTYEAR
        EXECUTE UPDATE_PROP_REV @STATEMENTYEAR,@OUT
        ---------------------
        --5 mins per Model 0-3 (12 mins total)
        --REGRESS calculate regression solutions for all groupings (MDRA,SUBTYPE) with threshold # of observations sufficient DATANUM to calculate the given MODELNUM
        --SOLUTION for each (MDRA,SUBTYPE, DATANUM) grouping identify the best (MDRA_SOLUTION,SUBTYPE_SOLUTION) for given MODELNUM to calculate the corresponding independent VAR
        --AVM for each property use the SOLUTION for the (MDRA,SUBTYPE, DATANUM) within which is is contained to calculate the next refinement to the AVM  
        SELECT @MODELNUM=0 
        EXECUTE INSERT_PROP_REGRESS_AVM_ALL @MIN_NUMPROPS_FOR_US_MEAN_CALC,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@MODELNUM ,@SUBTYPE_START,@UWDATE_START,@UWDATE_END    
        EXECUTE INSERT_PROP_SOLUTION_AVM @STATEMENTYEAR,@MODELNUM
        EXECUTE UPDATE_PROP_AVM @STATEMENTYEAR,@OUT,@MODELNUM
        SELECT @MODELNUM=1
        EXECUTE INSERT_PROP_REGRESS_AVM_ALL @MIN_NUMPROPS_FOR_US_MEAN_CALC,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@MODELNUM ,@SUBTYPE_START,@UWDATE_START,@UWDATE_END    
        EXECUTE INSERT_PROP_SOLUTION_AVM @STATEMENTYEAR,@MODELNUM
        EXECUTE UPDATE_PROP_AVM @STATEMENTYEAR,@OUT,@MODELNUM
        SELECT @MODELNUM=2
        EXECUTE INSERT_PROP_REGRESS_AVM_ALL @MIN_NUMPROPS_FOR_US_MEAN_CALC,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@MODELNUM ,@SUBTYPE_START,@UWDATE_START,@UWDATE_END    
        EXECUTE INSERT_PROP_SOLUTION_AVM @STATEMENTYEAR,@MODELNUM
        EXECUTE UPDATE_PROP_AVM @STATEMENTYEAR,@OUT,@MODELNUM
        SELECT @MODELNUM=3
        EXECUTE INSERT_PROP_REGRESS_AVM_ALL @MIN_NUMPROPS_FOR_US_MEAN_CALC,@MIN_NUMPROPS_IN_ST_MDRA_YR_TO_FIT_MODEL,@STATEMENTYEAR,@MODELNUM ,@SUBTYPE_START,@UWDATE_START,@UWDATE_END    
        EXECUTE INSERT_PROP_SOLUTION_AVM @STATEMENTYEAR,@MODELNUM
        EXECUTE UPDATE_PROP_AVM @STATEMENTYEAR,@OUT,@MODELNUM

        
        SELECT @STATEMENTYEAR=@STATEMENTYEAR-1
    END


EXECUTE INSERT_DBPROPERTY
EXECUTE INSERT_DBPROPERTY_SHORT
EXECUTE INSERT_METROCOUNTS

--DECLARE @TIMESTAMP_LAST DATETIME2(7) SELECT @TIMESTAMP_LAST=CURRENT_TIMESTAMP
declare @min_statementyear int select @min_statementyear=2020
delete from dbproperty_short where STATEMENTYEAR_MOSTRECENT<@min_statementyear

-- Francisco: JUST FOR TESTING ?   

SELECT CONCAT('PERFORMED AVM CALCULATION .. BREAK DOWN/RUNTIME(SEC)=', DATEDIFF(S,@TIMESTAMP_LAST,CURRENT_TIMESTAMP)) SELECT @TIMESTAMP_LAST=CURRENT_TIMESTAMP
SELECT * FROM LPLIST_AVM ORDER BY UWDATE DESC
SELECT DISTINCT 
YEAR(UWDATE) AS UWYEAR,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.UWDATE)=YEAR(L.UWDATE)) AS NUM,
(SELECT AVG(UW_CAPRATE) FROM LPLIST_AVM X WHERE YEAR(X.UWDATE)=YEAR(L.UWDATE)) AS UW_CAPRATE,
(SELECT AVG(VAL_CAPRATE) FROM LPLIST_AVM X WHERE YEAR(X.UWDATE)=YEAR(L.UWDATE)) AS VAL_CAPRATE,
(SELECT AVG(LOANRATE) FROM LPLIST_AVM X WHERE YEAR(X.UWDATE)=YEAR(L.UWDATE)) AS LOANRATE
FROM LPLIST_AVM L ORDER BY YEAR(UWDATE) DESC

SELECT DISTINCT 
YEAR(LOANORIGDATE) AS ORIGYEAR,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS NUM,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND UW_CAPRATE>0) AS NUM_UW_CAPRATE,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND VAL_CAPRATE>0) AS NUM_VAL_CAPRATE,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND UW_CAPRATE_ESTIMATE>0) AS NUM_UW_CAPRATE_ESTIMATE,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND UW_NOI_PERUNIT>0) AS NUM_UW_NOI,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND NOI_PERUNIT>0) AS NUM_NOI_PERUNIT,
(SELECT COUNT(*) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND VAL_PERUNIT_ESTIMATE>0) AS NUM_VAL_PERUNIT_ESTIMATE,
(SELECT AVG(UW_CAPRATE) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS UW_CAPRATE,
(SELECT AVG(VAL_CAPRATE) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS VAL_CAPRATE,
(SELECT AVG(UW_CAPRATE_ESTIMATE) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS UW_CAPRATE_ESTIMATE,
(SELECT AVG(12*NUMUNITS*NOI_PERUNIT/VALUATION_ESTIMATE) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS VAL_CAPRATE_ESTIMATE,
(SELECT AVG(UW_REV_PERUNIT) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS UW_REV_PERUNIT,
(SELECT AVG(REV_PERUNIT) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE)) AS REV_PERUNIT,
(SELECT AVG(LOANRATE) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND LOANFIXEDVSFLOAT='FIXED') AS LOANRATE,
(SELECT AVG(RATEAVG3MORIG_TRSY10Y) FROM LPLIST_AVM X WHERE YEAR(X.LOANORIGDATE)=YEAR(L.LOANORIGDATE) AND LOANFIXEDVSFLOAT='FIXED') AS TRSYRATE
FROM LPLIST_AVM L ORDER BY YEAR(LOANORIGDATE) DESC

SELECT
EXID_PLID_PRID, 
LOANORIGDATE,
UWDATE,
VALDATE_ESTIMATE,
UW_CAPRATE,
VAL_CAPRATE,
UW_CAPRATE_ESTIMATE,
(UW_REV_PERUNIT_ESTIMATE-UW_EXP_PERUNIT_ESTIMATE) AS UW_NOI_PERUNIT_ESTIMATE,
(UW_REV_PERUNIT-UW_EXP_PERUNIT) AS UW_NOI_PERUNIT,
NOI_PERUNIT,
LOANRATE,
RATEAVG3MORIG_TRSY10Y,
LOANFIXEDVSFLOAT,
LOANPURPOSE

FROM LPLIST_AVM L ORDER BY LOANORIGDATE DESC

SELECT DISTINCT
SAMEPROPERTYID,
NCREIFMETRO AS CMSA,
PROPERTYSUBTYPE_ASSIGNED AS SUBTYPE,
NUMUNITS,
YEARBUILTRENOV,
LOWINCOMESTATUS AS AFFORDABILITY, 
UWYEAR_MOSTRECENT,AVMYEAR_MOSTRECENT,REVYEAR_MOSTRECENT,FFYEAR_MOSTRECENT,

D.VALDATE_ESTIMATE,UW_CAPRATE_ESTIMATE,VAL_PERUNIT_ESTIMATE,UW_REV_PERUNIT_ESTIMATE,UW_EXP_PERUNIT_ESTIMATE,
D.STATEMENTENDDATE_REV,REV_PERUNIT AS TRAILING_REV_PERUNIT,EXP_PERUNIT AS TRAILING_EXP_PERUNIT,
D.UWDATE,UW_CAPRATE,UW_VAL_PERUNIT,UW_REV_PERUNIT,UW_EXP_PERUNIT,

(SELECT MDRA_SOLUTION_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) AS OBSERVATION_SET_GEO,
(SELECT SUBTYPE_SOLUTION_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) AS OBSERVATION_SET_SUBTYPE,

CONCAT((SELECT VAR1_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT),
	CASE WHEN (SELECT COEFF1_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT)>0 THEN '(+' ELSE '(-' END,')') AS CAPRATE_INDICATOR_1,

CONCAT((SELECT VAR2_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT),
	CASE WHEN (SELECT COEFF2_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT)>0 THEN '(+' ELSE '(-' END,')') AS CAPRATE_INDICATOR_2,

CASE WHEN (SELECT VAR3_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) IS NULL THEN 'NO TRAILING FINANCIALS' 
	ELSE CONCAT((SELECT VAR3_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT),
					CASE WHEN (SELECT COEFF3_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT)>0 THEN '(+' ELSE '(-' END,')') END AS CAPRATE_INDICATOR_3,

CASE WHEN (SELECT VAR4_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) IS NULL THEN 'NO LINE-ITEM FINANCIALS' 
	ELSE CONCAT((SELECT VAR4_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT),
					CASE WHEN (SELECT COEFF4_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT)>0 THEN '(+' ELSE '(-' END,')') END AS CAPRATE_INDICATOR_4,

CASE WHEN (SELECT VAR5_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) IS NULL THEN 'NO YEAR-ON-YEAR FINANCIALS' 
	ELSE CONCAT((SELECT VAR5_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT),
					CASE WHEN (SELECT COEFF5_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT)>0 THEN '(+' ELSE '(-' END,')') END AS CAPRATE_INDICATOR_5
FROM DBPROPERTY D WHERE 
VALDATE_ESTIMATE IS NOT NULL AND UWDATE IS NOT NULL AND
(SELECT VAR3_UWCAP FROM PROP_AVM X WHERE X.EXID_PLID_PRID=D.EXID_PLID_PRID AND X.STATEMENTYEAR=D.AVMYEAR_MOSTRECENT) IS NOT NULL
ORDER BY REVYEAR_MOSTRECENT DESC, D.VALDATE_ESTIMATE DESC

SELECT
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE STATEMENTYEAR_MOSTRECENT=2022) AS STATEMENTYEAR_2022,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE REVYEAR_MOSTRECENT=2022) AS REVYEAR_MOSTRECENT_2022,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE FFYEAR_MOSTRECENT=2022) AS FFYEAR_MOSTRECENT_2022,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE ORIGYEAR_MOSTRECENT=2022) AS ORIGYEAR_MOSTRECENT_2022,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE UWYEAR_MOSTRECENT=2022) AS UWYEAR_MOSTRECENT_2022

SELECT
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE STATEMENTYEAR_MOSTRECENT=2021) AS STATEMENTYEAR_2021,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE REVYEAR_MOSTRECENT=2021) AS REVYEAR_MOSTRECENT_2021,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE FFYEAR_MOSTRECENT=2021) AS FFYEAR_MOSTRECENT_2021,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE ORIGYEAR_MOSTRECENT=2021) AS ORIGYEAR_MOSTRECENT_2021,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE UWYEAR_MOSTRECENT=2021) AS UWYEAR_MOSTRECENT_2021

SELECT
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE STATEMENTYEAR_MOSTRECENT=2020) AS STATEMENTYEAR_2020,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE REVYEAR_MOSTRECENT=2020) AS REVYEAR_MOSTRECENT_2020,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE FFYEAR_MOSTRECENT=2020) AS FFYEAR_MOSTRECENT_2020,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE ORIGYEAR_MOSTRECENT=2020) AS ORIGYEAR_MOSTRECENT_2020,
(SELECT COUNT(*) FROM DBPROPERTY_SHORT WHERE UWYEAR_MOSTRECENT=2020) AS UWYEAR_MOSTRECENT_2020

END TRY

BEGIN CATCH
    SELECT 
     ERROR_NUMBER() AS ErrorNumber
    ,ERROR_SEVERITY() AS ErrorSeverity
    ,ERROR_STATE() AS ErrorState
    ,ERROR_PROCEDURE() AS ErrorProcedure
    ,ERROR_LINE() AS ErrorLine
    ,ERROR_MESSAGE() AS ErrorMessage
END CATCH

END
